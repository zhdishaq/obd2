/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import { Platform,Alert, StyleSheet, Text, View ,ScrollView,DeviceEventEmitter, TouchableOpacity} from 'react-native';
import JetBridge_OBDII from 'react-native-obdii';

export default class App extends Component {
  

  state = {
    direction: '-',
    speed: '0km/h',
    rpm: '0RPM',
    engineRunTime: '00:00:00',
    isStartLiveData: false,
    gpsState: '-',
    btStatus : '-',
    btDeviceList: [],
    btSelectedDeviceAddress: '10 F0 8B 3F 91',
    obdStatus: 'disconnected',
    debug : '-',
    isMockUpMode:true,
    obd2Data : { } ,
    status: 'starting',
    message: '--',
    selectedBTDeviceIndex: 0,
    btDeviceListForUI: [],
    btDeviceList: [],
  };



  componentDidMount() {
     let pairedList = [];
    let selected = 0;


    JetBridge_OBDII.getBluetoothDeviceNameList()
      .then((nameList) => {
      //  console.log('Bluetooth device list : ' + JSON.stringify(nameList));
        this.setState({btDeviceList : nameList});
        let deviceForUI = nameList.map((item, index) => {
          if (item.address === this.props.btSelectedDeviceAddress) {
            this.setState({selectedBTDeviceIndex : index});
          }
          return item.name + '\n' + item.address;
        });
        this.setState({btDeviceListForUI : nameList});
      })
      .catch((e) => {
        console.log('Get device name error : ' + e)
        
      });


    this.btStatusListener = DeviceEventEmitter.addListener('obd2BluetoothStatus', this.btStatus.bind(this));
   this.obdStatusListener = DeviceEventEmitter.addListener('obd2Status', this.obdStatus.bind(this));
   this.obdLiveDataListener = DeviceEventEmitter.addListener('obd2LiveData', this.obdLiveData.bind(this));
    
  this.setDeviceAddressListener = DeviceEventEmitter.addListener('OBDReader.setDeviceAddress', this.setDeviceAddress.bind(this));
    
  
  }

  btStatus(data) {
    this.setState({btStatus : data.status});
  }

  obdStatus(data) {
    this.setState({obdStatus : data.status});
  }

  obdLiveData(data) {
    
    let copyData = JSON.parse(JSON.stringify(this.state.obd2Data));
    copyData[data.cmdID] = data;
    console.log(JSON.stringify(copyData));
    this.setState({
      obd2Data : copyData,
    });

     if (data.cmdID === 'ENGINE_RPM') {
      this.setState({
         rpm : data.cmdResult,
       });
     }
 
     if (data.cmdID === 'SPEED') {
      this.setState({
         speed: data.cmdResult,
      });
     }
  }

  sensorOrientation(data) {
//    this.setState({debug: 'Orientation data = ' + JSON.stringify(data)});
    if (data.azimuth >= 337.5 || data.azimuth < 22.5) {
      if (this.state.direction !== 'N') {
        this.setState({direction: 'N'});
      }
    } else if (data.azimuth >= 22.5 && data.azimuth < 67.5) {
      if (this.state.direction !== 'NE') {
        this.setState({direction: 'NE'});
      }
    } else if (data.azimuth >= 67.5 && data.azimuth < 112.5) {
      if (this.state.direction !== 'E') {
        this.setState({direction: 'E'});
      }
    } else if (data.azimuth >= 112.5 && data.azimuth < 157.5) {
      if (this.state.direction !== 'SE') {
        this.setState({direction: 'SE'});
      }
    } else if (data.azimuth >= 157.5 && data.azimuth < 202.5) {
      if (this.state.direction !== 'S') {
        this.setState({direction: 'S'});
      }
    } else if (data.azimuth >= 202.5 && data.azimuth < 247.5) {
      if (this.state.direction !== 'SW') {
        this.setState({direction: 'SW'});
      }
    } else if (data.azimuth >= 247.5 && data.azimuth < 292.5) {
      if (this.state.direction !== 'W') {
        this.setState({direction: 'W'});
      }
    } else if (data.azimuth >= 292.5 && data.azimuth < 337.5) {
      if (this.state.direction !== 'NW') {
        this.setState({direction: 'NW'});
      }
    }
  }
 

  componentWillUnmount() {
    this.stopLiveData();
    this.btStatusListener.remove();
    this.obdStatusListener.remove();
    this.obdLiveDataListener.remove();
    this.setDeviceAddressListener.remove();
  }

  onReady() {
    JetBridge_OBDII.ready();
  }

  startLiveData() {
   
    /* if (!this.state.isMockUpMode) {
      Alert.alert(
        'Bluetooth Device',
        'You have to enable Bluetooth and select bluetooth device ',
        [
          {text: 'OK', onPress: () => {}},
        ]
      )
      return;
    } */

        this.setState({
          isStartLiveData: true,
        });
        
       // SensorManager.startOrientation(1000);
       // this.listenerOrientation = DeviceEventEmitter.addListener('Orientation', this.sensorOrientation);
        JetBridge_OBDII.setMockUpMode(this.state.isMockUpMode);
       
        JetBridge_OBDII.startLiveData(this.state.btSelectedDeviceAddress);
        this.onReady();
    
    //  });
  }

  stopLiveData() {
    this.setState({
      isStartLiveData: false,
      direction: '-',
      bluetoothStatus: '-',
    });
   // SensorManager.stopOrientation();
    this.obdLiveDataListener && this.obdLiveDataListener.remove();
  //  this.listenerOrientation && this.listenerOrientation.remove();
    JetBridge_OBDII.stopLiveData();
  }

  getDTC() {
  }

  getTrips() {
  }

  setDeviceAddress(aDeviceAddress) {
    console.log('setDeviceAddress : ' + aDeviceAddress);
    this.setState({btSelectedDeviceAddress : aDeviceAddress});
  }

 

  runMenu(value) {
    switch(value) {
      case 1 : 
        this.startLiveData();
        break;
      case 2 :
        this.stopLiveData();
        break;
      case 3 :
        this.openSettings();
        break;
      default :
        break;
    }
  }

  render() {
    let startLiveColor = this.state.isStartLiveData ? 'Grey' : 'Black';
    let stopLiveColor = this.state.isStartLiveData ? 'Black' : 'Grey';

    let originData = this.state.obd2Data;
    let cmdKeys = Object.keys(this.state.obd2Data);
    let cmdData = cmdKeys.map(function(key) { return originData[key]; });

    return (
      <View style={styles.bodyContainer}>
      <View style={{flex: .1, flexDirection:'row'}}>
        <Text style={{fontSize:30}}>{this.state.speed} </Text>
        <View style={{flex: 0.8}}/>
        <Text style={{fontSize:30}}>{this.state.direction}</Text>
      </View>
      <View style={{flex: .05, flexDirection:'row', justifyContent: 'space-around'}}>
        <Text style={{fontSize:15}}>{this.state.speed}</Text>
        <Text style={{fontSize:15}}>{this.state.engineRunTime}</Text>
        <Text style={{fontSize:15}}>{this.state.rpm}</Text>
      </View>
      <View style={{flex: .6, borderWidth:1}}>
        <ScrollView>
          {
            cmdData.map((item, index) => (
              <View 
                style={{flexDirection:'row', alignItems: 'center'}}
                key={index}
                >
                <Text style={{flex: .6, textAlign:'right'}}>{item.cmdName}</Text>
                <Text style={{flex: .4}}>: {item.cmdResult}</Text>
              </View>
            ))
          }
        </ScrollView>
      </View>
      <View style={{flex: .1, flexDirection:'row', justifyContent: 'space-around'}}>
        <View>
          <Text style={{fontSize:18}}>GPS</Text>
          <Text style={{fontSize:15, textAlign: 'center'}}>{this.state.gpsState}</Text>
        </View>
        <View>
          <Text style={{fontSize:18}}>Bluetooth</Text>
          <Text style={{fontSize:15, textAlign: 'center'}}>{this.state.btStatus}</Text>
        </View>
        <View>
          <Text style={{fontSize:18}}>OBD</Text>
          <Text style={{fontSize:15, textAlign: 'center'}}>{this.state.obdStatus}</Text>
        </View>
      </View>
     
<View>
{
           this.state.btDeviceListForUI.map((item, index) => (
          
             <TouchableOpacity  key={index} onPress={()=>this.setState({selectedBTDeviceIndex:index,btSelectedDeviceAddress:item.address})}>
              <View 
                style={{flexDirection:'row', alignItems: 'center'}}
                key={index}
                >
                <Text style={{fontSize:15,  textAlign: 'center'}} >{item.name}:{item.address}</Text>
               </View>
              </TouchableOpacity>
            ))
          }
</View>

<View style={{flex: .1, flexDirection:'row', justifyContent: 'space-around'}}>
<TouchableOpacity style={styles.btn} onPress={()=>this.runMenu(1)}>
              <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>Start</Text>
              </TouchableOpacity>
        <TouchableOpacity style={styles.btn} onPress={()=>this.runMenu(2)}>
              <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>Stop</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.btn} onPress={()=>this.setState({isMockUpMode:!this.state.isMockUpMode})}>
              <Text style={{fontSize:15,color:'white', textAlign: 'center'}}>{this.state.isMockUpMode?'Test Mode':'Live Mode'}</Text>
              </TouchableOpacity>
        
      </View>
      <Text style={{fontSize:15,  textAlign: 'center'}}>{this.state.btSelectedDeviceAddress}</Text>

    </View>
    );
  }
}

const styles = StyleSheet.create({
  bodyContainer: {
    padding: 5,
    flex: .9
  },
  btn:{
    backgroundColor:'blue',padding:10, height:40, width:100},
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
